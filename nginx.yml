# restart_nginx.yml
---
- name: Restarting the Nginx if port 80 is down
  hosts: all
  gather_facts: false
  force_handlers: true
  ignore_unreachable: true 
  tasks:
    - name: Ping the host
      ansible.builtin.ping:
      register: ping_result

    - name: Ping is not successful
      ansible.builtin.debug:
        msg: "{{inventory_hostname}} is not from Ansible Controller...!"
      when: ping_result.unreachable is defined

    - name: Add unreachable hosts to a list
      ansible.builtin.set_fact:
        unreachable_hosts: "{{ unreachable_hosts | default([]) + [inventory_hostname] }}"
      when: ping_result.unreachable is defined
   
    - name: Install nginx on remote machine
      ansible.builtin.dnf:
        name: nginx
        state: installed 
      when: ping_result.unreachable is not defined

    - name: Firewalld |Open port 80 using firewalld
      ansible.posix.firewalld:
        port: 80/tcp
        permanent: yes
        state: enabled
      notify: Reload firewalld | To apply changes
      when: ping_result.unreachable is not defined

    - name: Make sure service is up and running | Nginx service
      ansible.builtin.service:
        name: nginx
        state: started
      become: true
      register: nginx_restart
      when: 
        - ping_result.unreachable is not defined
      ignore_errors : true   

    - name: Genrate Email content to Send in Email | Server is unreachable
      ansible.builtin.template:
        src: email_alert.html.j2
        dest: /tmp/alert_email.html
      run_once: true  
      delegate_to: 127.0.0.1
      when: ping_result.unreachable is defined

    - name: Email Alert if fail server is unreachable
      when: ping_result.unreachable is defined
      mail:
        host: smtp.gmail.com
        port: 587
        subtype: html
        to:
        - "nrathi@redhat.com"
        subject: "Alert: Host not reachable on SSH {{ inventory_hostname }}"
        body: "{{ lookup('file', '/tmp/alert_email.html') }}"
        username: "dmeonavneet@gmail.com"
        password: "rbfqhoincpyouxqk"
      run_once: true  
      delegate_to: 127.0.0.1
      changed_when: True   
      
  handlers:
    - name: Reload firewalld | To apply changes
      ansible.builtin.service:
        name: firewalld
        state: reloaded


- name: Clone, update replica, and push back to repo
  hosts: all
  gather_facts: no
  vars:
    repo_url: "git@github.com:navneet-rathi/sample.git"
    dest_path: "/tmp/sample"
    commit_msg: "Update replica count from 0 to 1"
    search_string: 'replicas:\s*0'
    replace_string: 'replicas: 1'
##### ROSA variables ###########
    cluster_name: my-rosa-cluster
    machine_pool_name: compute-pool-1
    instance_type: m5.large
    replicas: 3
    region: us-east-1
  tasks:
#### Command to add compute instance in ROSA
    - name: Create a new machine pool using ROSA CLI
      shell: |
        rosa create machinepool \
          --cluster {{ cluster_name }} \
          --name {{ machine_pool_id }} \
          --replicas {{ replicas }} \
          --instance-type {{ instance_type }} \
          --region {{ region }}
      register: result
      check_mode: true
###
#  Added for debugging purpose
    - debug:
        var: result.stdout

### to make changes in git repo #####
    - name: Clone Git repository with SSH key
      ansible.builtin.git:
        repo: "{{ repo_url }}"
        dest: "{{ dest_path }}"
        version: main
        accept_hostkey: yes
        #key_file: "~/.ssh/id_rsa"
        update: yes

    - name: Find all YAML and manifest files
      ansible.builtin.find:
        paths: "{{ dest_path }}"
        patterns: "*.yaml,*.yml"
        recurse: yes
      register: yaml_files

    - name: Replace replicas count in all matched files
      ansible.builtin.replace:
        path: "{{ item.path }}"
        regexp: "{{ search_string }}"
        replace: "{{ replace_string }}"
      loop: "{{ yaml_files.files }}"

    - name: Configure Git username
      ansible.builtin.command: git config user.name "ansible-bot"
      args:
        chdir: "{{ dest_path }}"

    - name: Configure Git email
      ansible.builtin.command: git config user.email "nrathi@redhat.com"
      args:
        chdir: "{{ dest_path }}"

    - name: Stage the modified file
      ansible.builtin.command: git add .
      args:
        chdir: "{{ dest_path }}"

    - name: Commit the changes
      ansible.builtin.command: git commit -m "{{ commit_msg }}"
      args:
        chdir: "{{ dest_path }}"
      register: commit_result
      failed_when: commit_result.rc != 0 and "'nothing to commit'" not in commit_result.stderr

    - name: Push changes back to Git repo
      ansible.builtin.command: git push origin main
      args:
        chdir: "{{ dest_path }}"